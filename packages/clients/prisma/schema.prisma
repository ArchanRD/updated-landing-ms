// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator pothos {
    provider     = "prisma-pothos-types"
    clientOutput = "@prisma/client"
    output       = "../build/pothos-types.ts"
}

generator joi {
    provider = "prisma-joi-generator"
    output   = "../build/joi-types"
}

model ExternalLink {
    id                 String               @id @default(cuid())
    categoryId         String
    resourceId         String
    destinationURL     String
    active             Boolean              @default(true)
    ExternalLinkClicks ExternalLinkClicks[]

    @@unique([categoryId, resourceId, active])
}

enum ExternalLinkClickType {
    HEADING
    BUTTON
}

model ExternalLinkClicks {
    id             String                @id @default(cuid())
    tiemstamp      DateTime              @default(now())
    type           ExternalLinkClickType
    externalLinkId String                @unique
    ExternalLink   ExternalLink          @relation(fields: [externalLinkId], references: [id])

    @@unique([externalLinkId, type])
}

enum UserType {
    NotionUser
    WebUser
}

model User {
    name               String
    notionItemId       String?
    email              String              @unique
    id                 String              @id @default(cuid())
    emailVerified      DateTime?
    image              String?
    accounts           Account[]
    sessions           Session[]
    type               UserType            @default(WebUser)
    UserSavedResources UserSavedResource[]
}

model UserSavedResource {
    id         String    @id @default(cuid())
    userId     String
    resourceId String
    user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    savedAt    DateTime? @default(now())

    @@unique([userId, resourceId])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
